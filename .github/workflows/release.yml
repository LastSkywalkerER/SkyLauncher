name: Build and Release Electron App

on:
  push:
    branches:
      - main # Запуск при каждом пуше в ветку main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check current working directory and list files
        run: |
          echo "Current working directory:"
          pwd

          echo "Files in the working directory:"
          ls -la

      - name: Check .env.example content
        run: |
          echo ".env.example content:"
          cat .env.example

      # Генерация .env файла из всех секретов с префиксами MAIN_VITE_ и RENDERER_VITE_
      - name: Generate .env file from .env.example
        env:
          MAIN_VITE_MINIO_ENDPOINT: ${{ secrets.MAIN_VITE_MINIO_ENDPOINT }}
          MAIN_VITE_MINIO_PORT: ${{ secrets.MAIN_VITE_MINIO_PORT }}
          MAIN_VITE_MINIO_USESSL: ${{ secrets.MAIN_VITE_MINIO_USESSL }}
          MAIN_VITE_MINIO_ACCESSKEY: ${{ secrets.MAIN_VITE_MINIO_ACCESSKEY }}
          MAIN_VITE_MINIO_SECRETKEY: ${{ secrets.MAIN_VITE_MINIO_SECRETKEY }}
          MAIN_VITE_CURSEFORGE_APIKEY: ${{ secrets.MAIN_VITE_CURSEFORGE_APIKEY }}
          RENDERER_VITE_BASE_URL: ${{ secrets.RENDERER_VITE_BASE_URL }}
          RENDERER_VITE_IP: ${{ secrets.RENDERER_VITE_IP }}
          RENDERER_VITE_PORT: ${{ secrets.RENDERER_VITE_PORT }}
        run: |
          # Проверка существования .env.example
          if [ ! -f .env.example ]; then
            echo ".env.example not found!"
            exit 1
          fi

          # Замена всех переменных в формате ${VARIABLE} на их значения из переменных окружения
          envsubst < .env.example > .env

          echo ".env file generated:"
          cat .env

      # Чтение версии Node.js из файла .nvmrc и удаление 'v' в начале
      - name: Use Node.js version from .nvmrc
        id: nvmrc_version
        run: |
          NODE_VERSION=$(cat .nvmrc | sed 's/^v//')  # Удаление 'v' из начала строки
          echo "Using Node.js version $NODE_VERSION"
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV  # Сохранение переменной в окружении

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # Использование версии из .nvmrc без 'v'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn

      # Установка Wine на macOS для сборки Windows .exe
      - name: Install Wine on macOS
        run: brew install --cask wine-stable

      - name: Build the app for macOS
        run: yarn build:mac

      - name: List files in dist after macOS build
        run: |
          echo "Files in dist after macOS build:"
          ls -la dist

      - name: Build the app for Windows
        run: yarn build:win

      - name: List files in dist after Windows build
        run: |
          echo "Files in dist after Windows build:"
          ls -la dist

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-dist
          path: dist/*.dmg

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-dist
          path: dist/*.exe

  release:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-dist
          path: dist/macos

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-dist
          path: dist/windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} # Используем ваш персональный токен
        with:
          tag_name: release-${{ github.run_number }} # Имя тега для релиза
          release_name: Release ${{ github.run_number }} # Имя релиза
          draft: false
          prerelease: false

      - name: Find macOS build artifact
        id: macos_artifact
        run: |
          macos_file=$(find . -name "*.dmg" | xargs -n 1 basename)
          if [ -z "$macos_file" ]; then
            echo "No macOS build artifact found."
            exit 1  # Завершение работы с ошибкой, если артефакт не найден
          fi
          echo "macos_file=${macos_file}" >> $GITHUB_ENV  # Установка переменной окружения

      - name: Find Windows build artifact
        id: windows_artifact
        run: |
          windows_file=$(find . -name "*.exe" | xargs -n 1 basename)
          if [ -z "$windows_file" ]; then
            echo "No Windows build artifact found."
            exit 1  # Завершение работы с ошибкой, если артефакт не найден
          fi
          echo "windows_file=${windows_file}" >> $GITHUB_ENV  # Установка переменной окружения

      - name: Upload macOS build artifact using GitHub CLI
        run: |
          gh release upload "${{ steps.create_release.outputs.tag_name }}" "dist/macos/${{ env.macos_file }}" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Upload Windows build artifact using GitHub CLI
        run: |
          gh release upload "${{ steps.create_release.outputs.tag_name }}" "dist/windows/${{ env.windows_file }}" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
