name: Build and Release Electron App

on:
  push:
    branches:
      - main  # Запуск при каждом пуше в ветку main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Генерация .env файла из всех секретов с префиксами MAIN_VITE_ и RENDERER_VITE_
      - name: Generate .env file from all relevant secrets
        run: |
          touch .env
          for var in $(printenv); do
            # Фильтрация переменных с префиксами MAIN_VITE_ и RENDERER_VITE_
            if [[ $var == MAIN_VITE_* || $var == RENDERER_VITE_* ]]; then
              key=$(echo $var | cut -d'=' -f1)
              value=$(echo $var | cut -d'=' -f2-)
              echo "$key=$value" >> .env
            fi
          done
          echo ".env file generated:"
          cat .env

      # Чтение версии Node.js из файла .nvmrc и удаление 'v' в начале
      - name: Use Node.js version from .nvmrc
        id: nvmrc_version
        run: |
          NODE_VERSION=$(cat .nvmrc | sed 's/^v//')  # Удаление 'v' из начала строки
          echo "Using Node.js version $NODE_VERSION"
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV  # Сохранение переменной в окружении

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}  # Использование версии из .nvmrc без 'v'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn

      # Установка Wine на macOS для сборки Windows .exe
      - name: Install Wine on macOS
        run: brew install --cask wine-stable

      - name: Build the app for macOS
        run: yarn build:mac

      - name: List files in dist after macOS build
        run: |
          echo "Files in dist after macOS build:"
          ls -la dist

      - name: Build the app for Windows
        run: yarn build:win

      - name: List files in dist after Windows build
        run: |
          echo "Files in dist after Windows build:"
          ls -la dist

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-dist
          path: dist/*.dmg

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-dist
          path: dist/*.exe

  release:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-dist
          path: dist/macos

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-dist
          path: dist/windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Используем персональный токен
        with:
          tag_name: release-${{ github.run_number }}  # Имя тега для релиза
          release_name: Release ${{ github.run_number }}  # Имя релиза
          draft: false
          prerelease: false

      - name: Get macOS build artifact name
        id: macos_artifact
        run: |
          macos_file=$(ls dist/*.dmg | xargs -n 1 basename)
          echo "macos_file=${macos_file}" >> $GITHUB_ENV  # Установка переменной окружения

      - name: Check for Windows build artifact
        run: |
          if ls dist/*.exe 1> /dev/null 2>&1; then
            windows_file=$(ls dist/*.exe | xargs -n 1 basename)
            echo "windows_file=${windows_file}" >> $GITHUB_ENV  # Установка переменной окружения
          else
            echo "No Windows build artifact found."
            exit 1  # Завершение работы с ошибкой, если артефакт не найден
          fi

      - name: Upload macOS build artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/${{ env.macos_file }}  # Используем имя файла из переменной
          asset_name: ${{ env.macos_file }}
          asset_content_type: application/octet-stream

      - name: Upload Windows build artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/${{ env.windows_file }}  # Используем имя файла из переменной
          asset_name: ${{ env.windows_file }}
          asset_content_type: application/octet-stream
